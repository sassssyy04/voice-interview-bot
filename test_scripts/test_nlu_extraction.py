#!/usr/bin/env python3
"""Test script to verify NLU entity extraction from Devanagari text."""

import asyncio
import sys
import os

# Add the project root to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.nlu import NLUService


async def test_nlu_extraction():
    """Test entity extraction with actual ASR output."""
    
    nlu = NLUService()
    
    print("üß† Testing NLU Entity Extraction with Devanagari Text...")
    
    # Test cases based on actual ElevenLabs ASR output
    test_cases = [
        {
            "text": "‡§Æ‡•à‡§Ç ‡§á‡§® ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•á‡§∞‡§æ ‡§™‡§ø‡§® ‡§ï‡•ã‡§° ‡§π‡•à ‡§ó‡§æ‡§Ç‡§µ ‡§∏‡•á ‡§∞‡•â‡§Ø‡§ü‡§ø‡§ï‡•§",
            "field": "pincode",
            "expected": "Delhi pincode extraction"
        },
        {
            "text": "‡§≠‡§æ‡§à, ‡§Æ‡•à‡§Ç ‡§´‡§ø‡§´‡•ç‡§ü‡•Ä‡§® ‡§•‡§æ‡§â‡§ú‡•á‡§Ç‡§° ‡§™‡§∞ ‡§Æ‡§Ç‡§• ‡§è‡§ï‡•ç‡§∏‡§™‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§",
            "field": "expected_salary", 
            "expected": "15000"
        },
        {
            "text": "‡§π‡§æ‡§Ç ‡§≠‡§æ‡§à, ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§¨‡§æ‡§á‡§ï ‡§π‡•à ‡§¨‡§ú‡§æ‡§ú ‡§™‡•Å‡§≤‡§∏‡§∞‡•§",
            "field": "has_two_wheeler",
            "expected": "True"
        },
        {
            "text": "‡§Æ‡•à‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§á‡§Ç‡§ó‡•ç‡§≤‡§ø‡§∂ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§¨‡•ã‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§î‡§∞ ‡§•‡•ã‡§°‡§º‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≠‡•Ä‡•§",
            "field": "languages",
            "expected": "Hindi, English, Marathi"
        },
        {
            "text": "‡§Æ‡•à‡§Ç ‡§á‡§Æ‡•Ä‡§°‡§ø‡§è‡§ü‡§≤‡•Ä ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§Ü‡§ú ‡§∏‡•á ‡§≠‡•Ä‡•§",
            "field": "availability_date",
            "expected": "immediately/today"
        },
        {
            "text": "‡§Æ‡•à‡§Ç ‡§Æ‡•â‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§∂‡§ø‡§´‡•ç‡§ü ‡§™‡•ç‡§∞‡•á‡§´‡§∞ ‡§ï‡§∞‡§§‡§æ‡•§ ‡§∏‡•Å‡§¨‡§π ‡§ï‡§æ ‡§ü‡§æ‡§á‡§Æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§§‡§æ‡•§",
            "field": "preferred_shift",
            "expected": "morning"
        },
        {
            "text": "‡§Æ‡•à‡§Ç ‡§¶‡•ã ‡§∏‡§æ‡§≤ ‡§∏‡•á ‡§µ‡•á‡§Ø‡§∞‡§π‡§æ‡§â‡§∏ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
            "field": "total_experience_months",
            "expected": "24 months"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n--- Test {i}: {case['field']} ---")
        print(f"Input: '{case['text']}'")
        print(f"Expected: {case['expected']}")
        
        try:
            # Test normalization first
            normalized = nlu._normalize_text(case['text'])
            print(f"Normalized: '{normalized}'")
            
            # Test entity extraction
            result = await nlu.extract_entities(case['text'], case['field'])
            
            if result.get('value'):
                print(f"‚úÖ SUCCESS!")
                print(f"   Extracted: {result['value']}")
                print(f"   Confidence: {result.get('confidence', 0):.2f}")
                print(f"   Method: {result.get('method', 'unknown')}")
            else:
                print(f"‚ùå FAILED - No value extracted")
                print(f"   Result: {result}")
                
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
    
    print(f"\nüîç Summary: NLU entity extraction test completed")


if __name__ == "__main__":
    asyncio.run(test_nlu_extraction()) 